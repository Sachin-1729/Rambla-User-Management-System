import type { DrawingProviderProps } from '../context/DrawingProvider';
import type { ColorProviderProps } from '../context/ColorProvider';
import type { CartesianContextProviderProps } from '../context/CartesianProvider';
import type { SeriesContextProviderProps } from '../context/SeriesContextProvider';
import type { ZAxisContextProviderProps } from '../context/ZAxisContextProvider';
import type { ChartContainerProps } from './ChartContainer';
import { HighlightedProviderProps } from '../context';
import { ChartsSurfaceProps } from '../ChartsSurface';
export declare const useChartContainerProps: (props: ChartContainerProps, ref: React.ForwardedRef<unknown>) => {
    children: import("react").ReactNode;
    drawingProviderProps: Omit<DrawingProviderProps, "children">;
    colorProviderProps: Omit<ColorProviderProps, "children">;
    seriesContextProps: Omit<SeriesContextProviderProps, "children">;
    cartesianContextProps: Omit<CartesianContextProviderProps, "children">;
    zAxisContextProps: Omit<ZAxisContextProviderProps, "children">;
    highlightedProviderProps: Omit<HighlightedProviderProps, "children">;
    chartsSurfaceProps: ChartsSurfaceProps & {
        ref: any;
    };
    xAxis: {
        reverse?: boolean;
        fill?: string;
        stroke?: string;
        data?: any[] | undefined;
        label?: string;
        max?: number | Date;
        min?: number | Date;
        classes?: Partial<import("..").ChartsAxisClasses>;
        slots?: Partial<import("../internals").ChartsAxisSlots>;
        slotProps?: Partial<import("../internals").ChartsAxisSlotProps>;
        dataKey?: string;
        valueFormatter?: ((value: any, context: import("../internals").AxisValueFormatterContext) => string) | undefined;
        colorMap?: import("../models/colorMapping").ContinuousColorConfig<number | Date> | import("../models/colorMapping").PiecewiseColorConfig<number | Date> | import("../models/colorMapping").OrdinalColorConfig<string | number | Date> | undefined;
        tickMaxStep?: number;
        tickMinStep?: number;
        tickNumber?: number;
        tickPlacement?: "start" | "end" | "middle" | "extremities";
        tickLabelPlacement?: "middle" | "tick";
        scaleType?: "linear" | "time" | "log" | "band" | "point" | "pow" | "sqrt" | "utc" | undefined;
        axisId?: import("../internals").AxisId;
        disableLine?: boolean;
        disableTicks?: boolean;
        tickFontSize?: number;
        tickLabelStyle?: import("..").ChartsTextProps["style"];
        labelStyle?: import("..").ChartsTextProps["style"];
        tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
        labelFontSize?: number;
        tickSize?: number;
        tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
        hideTooltip?: boolean;
        id: import("../internals").AxisId;
    }[];
    yAxis: {
        reverse?: boolean;
        fill?: string;
        stroke?: string;
        data?: any[] | undefined;
        label?: string;
        max?: number | Date;
        min?: number | Date;
        classes?: Partial<import("..").ChartsAxisClasses>;
        slots?: Partial<import("../internals").ChartsAxisSlots>;
        slotProps?: Partial<import("../internals").ChartsAxisSlotProps>;
        dataKey?: string;
        valueFormatter?: ((value: any, context: import("../internals").AxisValueFormatterContext) => string) | undefined;
        colorMap?: import("../models/colorMapping").ContinuousColorConfig<number | Date> | import("../models/colorMapping").PiecewiseColorConfig<number | Date> | import("../models/colorMapping").OrdinalColorConfig<string | number | Date> | undefined;
        tickMaxStep?: number;
        tickMinStep?: number;
        tickNumber?: number;
        tickPlacement?: "start" | "end" | "middle" | "extremities";
        tickLabelPlacement?: "middle" | "tick";
        scaleType?: "linear" | "time" | "log" | "band" | "point" | "pow" | "sqrt" | "utc" | undefined;
        axisId?: import("../internals").AxisId;
        disableLine?: boolean;
        disableTicks?: boolean;
        tickFontSize?: number;
        tickLabelStyle?: import("..").ChartsTextProps["style"];
        labelStyle?: import("..").ChartsTextProps["style"];
        tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
        labelFontSize?: number;
        tickSize?: number;
        tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
        hideTooltip?: boolean;
        id: import("../internals").AxisId;
    }[];
};
