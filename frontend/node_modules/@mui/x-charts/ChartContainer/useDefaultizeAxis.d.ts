import { MakeOptional } from '../models/helpers';
import { AxisConfig, ScaleName } from '../models';
import { ChartsAxisProps } from '../models/axis';
export declare const useDefaultizeAxis: (inXAxis: MakeOptional<AxisConfig<ScaleName, any, ChartsAxisProps>, "id">[] | undefined, inYAxis: MakeOptional<AxisConfig<ScaleName, any, ChartsAxisProps>, "id">[] | undefined) => {
    reverse?: boolean;
    fill?: string;
    stroke?: string;
    data?: any[] | undefined;
    label?: string;
    max?: number | Date;
    min?: number | Date;
    classes?: Partial<import("..").ChartsAxisClasses>;
    slots?: Partial<import("../models/axis").ChartsAxisSlots>;
    slotProps?: Partial<import("../models/axis").ChartsAxisSlotProps>;
    dataKey?: string;
    valueFormatter?: ((value: any, context: import("../models/axis").AxisValueFormatterContext) => string) | undefined;
    colorMap?: import("../models/colorMapping").ContinuousColorConfig<number | Date> | import("../models/colorMapping").PiecewiseColorConfig<number | Date> | import("../models/colorMapping").OrdinalColorConfig<string | number | Date> | undefined;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    scaleType?: "linear" | "time" | "log" | "band" | "point" | "pow" | "sqrt" | "utc" | undefined;
    axisId?: import("../models/axis").AxisId;
    disableLine?: boolean;
    disableTicks?: boolean;
    tickFontSize?: number;
    tickLabelStyle?: import("..").ChartsTextProps["style"];
    labelStyle?: import("..").ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    labelFontSize?: number;
    tickSize?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    hideTooltip?: boolean;
    id: import("../models/axis").AxisId;
}[][];
