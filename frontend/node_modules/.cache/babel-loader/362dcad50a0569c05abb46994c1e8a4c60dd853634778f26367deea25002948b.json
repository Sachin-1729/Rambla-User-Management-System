{"ast":null,"code":"/**\n * Helper that converts values and percentages into values.\n * @param value The value provided by the developer. Can either be a number or a string with '%' or 'px'.\n * @param refValue The numerical value associated to 100%.\n * @returns The numerical value associated to the provided value.\n */\nexport function getPercentageValue(value, refValue) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  if (value === '100%') {\n    // Avoid potential rounding issues\n    return refValue;\n  }\n  if (value.endsWith('%')) {\n    const percentage = Number.parseFloat(value.slice(0, value.length - 1));\n    if (!Number.isNaN(percentage)) {\n      return percentage * refValue / 100;\n    }\n  }\n  if (value.endsWith('px')) {\n    const val = Number.parseFloat(value.slice(0, value.length - 2));\n    if (!Number.isNaN(val)) {\n      return val;\n    }\n  }\n  throw Error(`MUI X: Received an unknown value \"${value}\". It should be a number, or a string with a percentage value.`);\n}","map":{"version":3,"names":["getPercentageValue","value","refValue","endsWith","percentage","Number","parseFloat","slice","length","isNaN","val","Error"],"sources":["C:/Users/amris/OneDrive/Desktop/Rambla/frontend/node_modules/@mui/x-charts/esm/internals/getPercentageValue.js"],"sourcesContent":["/**\n * Helper that converts values and percentages into values.\n * @param value The value provided by the developer. Can either be a number or a string with '%' or 'px'.\n * @param refValue The numerical value associated to 100%.\n * @returns The numerical value associated to the provided value.\n */\nexport function getPercentageValue(value, refValue) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  if (value === '100%') {\n    // Avoid potential rounding issues\n    return refValue;\n  }\n  if (value.endsWith('%')) {\n    const percentage = Number.parseFloat(value.slice(0, value.length - 1));\n    if (!Number.isNaN(percentage)) {\n      return percentage * refValue / 100;\n    }\n  }\n  if (value.endsWith('px')) {\n    const val = Number.parseFloat(value.slice(0, value.length - 2));\n    if (!Number.isNaN(val)) {\n      return val;\n    }\n  }\n  throw Error(`MUI X: Received an unknown value \"${value}\". It should be a number, or a string with a percentage value.`);\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,kBAAkBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAClD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EACA,IAAIA,KAAK,KAAK,MAAM,EAAE;IACpB;IACA,OAAOC,QAAQ;EACjB;EACA,IAAID,KAAK,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IACvB,MAAMC,UAAU,GAAGC,MAAM,CAACC,UAAU,CAACL,KAAK,CAACM,KAAK,CAAC,CAAC,EAAEN,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;IACtE,IAAI,CAACH,MAAM,CAACI,KAAK,CAACL,UAAU,CAAC,EAAE;MAC7B,OAAOA,UAAU,GAAGF,QAAQ,GAAG,GAAG;IACpC;EACF;EACA,IAAID,KAAK,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;IACxB,MAAMO,GAAG,GAAGL,MAAM,CAACC,UAAU,CAACL,KAAK,CAACM,KAAK,CAAC,CAAC,EAAEN,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;IAC/D,IAAI,CAACH,MAAM,CAACI,KAAK,CAACC,GAAG,CAAC,EAAE;MACtB,OAAOA,GAAG;IACZ;EACF;EACA,MAAMC,KAAK,CAAC,qCAAqCV,KAAK,gEAAgE,CAAC;AACzH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}