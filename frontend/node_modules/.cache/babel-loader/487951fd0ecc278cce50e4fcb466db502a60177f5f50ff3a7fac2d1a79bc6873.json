{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amris\\\\OneDrive\\\\Desktop\\\\Rambla\\\\frontend\\\\src\\\\components\\\\providers\\\\AuthProvider.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const authToken = localStorage.getItem('authToken');\n\n//     try {\n//       if (authToken) {\n//         fetch('http://localhost:7000/users/auth/me', {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//         .then((res) => res.json())\n//         .then((data) => {\n//           if (data.user) {\n//             setUser(data.user);\n//           }\n//         });\n//       }\n//     } catch (error) {\n\n//       console.log('token removed');\n//       localStorage.removeItem('authToken');\n//     }\n//   },[])\n\n//   const login = (userData) => {\n//     setUser(userData.user);\n//     localStorage.setItem('authToken', userData.token); // Simulate storing a token\n//     //navigate('/');\n//   }; \n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem(\"authToken\");\n//     navigate('/login');\n//   };\n//   return (\n//     <AuthContext.Provider value={{ user, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;\n\n// ---------------------------------------Set Interval-----------------------------\n\n// import React, { createContext, useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const navigate = useNavigate();\n\n//   const checkAuthToken = async () => {\n//     const authToken = localStorage.getItem('authToken');\n//     if (authToken) {\n//       try {\n//         const response = await fetch('http://localhost:7000/users/auth/me', {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         });\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           if (data.user) {\n//             setUser(data.user);\n//           } else {\n//             logout(); // Invalid token, logout the user\n//           }\n//         } else {\n//           logout(); // Token validation failed, logout the user\n//         }\n//       } catch (error) {\n//         console.error('Error during token validation', error);\n//         logout();\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Initial check\n//     checkAuthToken();\n\n//     // Set interval to check token every 1 seconds\n//     const intervalId = setInterval(checkAuthToken, 100);\n\n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n//   }, []);\n\n//   const login = (userData) => {\n//     setUser(userData.user);\n//     localStorage.setItem('authToken', userData.token); // Simulate storing a token\n//     navigate('/');\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('authToken');\n//     navigate('/login');\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // Loading state to manage initial loading\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Function to check if token is valid\n  const checkAuthToken = async () => {\n    const authToken = localStorage.getItem('authToken');\n    if (authToken) {\n      try {\n        const response = await fetch('http://localhost:7000/users/auth/me', {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          if (data.user) {\n            setUser(data.user);\n          } else {\n            logout(); // Invalid token, logout the user\n          }\n        } else if (response.status === 401) {\n          logout(); // Token validation failed, logout the user\n        } else {\n          throw new Error('Token validation failed');\n        }\n      } catch (error) {\n        console.error('Error during token validation', error);\n        logout();\n      }\n    } else {\n      setUser(null); // No token, ensure user is null\n    }\n    setIsLoading(false); // Stop loading regardless of token validity\n  };\n  useEffect(() => {\n    checkAuthToken();\n  }, [location.pathname]);\n  const login = userData => {\n    setUser(userData.user);\n    localStorage.setItem('authToken', userData.token); // Store token\n    navigate('/');\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    navigate('/login');\n  };\n  if (isLoading) {\n    // Show a loading state or nothing while checking the token\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"sRAhdDr3Gtr9qAFaEyvpSYgaVX4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","useNavigate","useLocation","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","navigate","location","checkAuthToken","authToken","localStorage","getItem","response","fetch","headers","Authorization","ok","data","json","logout","status","Error","error","console","pathname","login","userData","setItem","token","removeItem","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["C:/Users/amris/OneDrive/Desktop/Rambla/frontend/src/components/providers/AuthProvider.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n\r\n//   useEffect(() => {\r\n//     const authToken = localStorage.getItem('authToken');\r\n    \r\n//     try {\r\n//       if (authToken) {\r\n//         fetch('http://localhost:7000/users/auth/me', {\r\n//         headers: {\r\n//           Authorization: `Bearer ${authToken}`,\r\n//         },\r\n//       })\r\n//         .then((res) => res.json())\r\n//         .then((data) => {\r\n//           if (data.user) {\r\n//             setUser(data.user);\r\n//           }\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n      \r\n//       console.log('token removed');\r\n//       localStorage.removeItem('authToken');\r\n//     }\r\n//   },[])\r\n  \r\n//   const login = (userData) => {\r\n//     setUser(userData.user);\r\n//     localStorage.setItem('authToken', userData.token); // Simulate storing a token\r\n//     //navigate('/');\r\n//   }; \r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"authToken\");\r\n//     navigate('/login');\r\n//   };\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default AuthContext;\r\n\r\n// ---------------------------------------Set Interval-----------------------------\r\n\r\n// import React, { createContext, useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n//   const checkAuthToken = async () => {\r\n//     const authToken = localStorage.getItem('authToken');\r\n//     if (authToken) {\r\n//       try {\r\n//         const response = await fetch('http://localhost:7000/users/auth/me', {\r\n//           headers: {\r\n//             Authorization: `Bearer ${authToken}`,\r\n//           },\r\n//         });\r\n\r\n//         if (response.ok) {\r\n//           const data = await response.json();\r\n//           if (data.user) {\r\n//             setUser(data.user);\r\n//           } else {\r\n//             logout(); // Invalid token, logout the user\r\n//           }\r\n//         } else {\r\n//           logout(); // Token validation failed, logout the user\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error during token validation', error);\r\n//         logout();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Initial check\r\n//     checkAuthToken();\r\n\r\n//     // Set interval to check token every 1 seconds\r\n//     const intervalId = setInterval(checkAuthToken, 100);\r\n\r\n//     // Cleanup interval on component unmount\r\n//     return () => clearInterval(intervalId);\r\n//   }, []);\r\n\r\n//   const login = (userData) => {\r\n//     setUser(userData.user);\r\n//     localStorage.setItem('authToken', userData.token); // Simulate storing a token\r\n//     navigate('/');\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem('authToken');\r\n//     navigate('/login');\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default AuthContext;\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true); // Loading state to manage initial loading\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Function to check if token is valid\r\n  const checkAuthToken = async () => {\r\n    const authToken = localStorage.getItem('authToken');\r\n    if (authToken) {\r\n      try {\r\n        const response = await fetch('http://localhost:7000/users/auth/me', {\r\n          headers: {\r\n            Authorization: `Bearer ${authToken}`,\r\n          },\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          if (data.user) {\r\n            setUser(data.user);\r\n          } else {\r\n            logout(); // Invalid token, logout the user\r\n          }\r\n        } else if (response.status === 401) {\r\n          logout(); // Token validation failed, logout the user\r\n        } else {\r\n          throw new Error('Token validation failed');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error during token validation', error);\r\n        logout();\r\n      }\r\n    } else {\r\n      setUser(null); // No token, ensure user is null\r\n    }\r\n    setIsLoading(false); // Stop loading regardless of token validity\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkAuthToken();\r\n  }, [location.pathname]);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData.user);\r\n    localStorage.setItem('authToken', userData.token); // Store token\r\n    navigate('/');\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('authToken');\r\n    navigate('/login');\r\n  };\r\n\r\n  if (isLoading) {\r\n    // Show a loading state or nothing while checking the token\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}