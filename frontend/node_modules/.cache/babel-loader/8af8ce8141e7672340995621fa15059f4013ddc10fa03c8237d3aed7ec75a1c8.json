{"ast":null,"code":"// // AuthContext.jsx\n// import React, { createContext, useState, useContext } from 'react';\n// import axios from 'axios';\n\n// // Create the context\n// const AuthContext = createContext();\n\n// // AuthProvider component\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const login = async (username, password) => {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const response = await axios.post('http://localhost:7000/users/login', {\n//         username,\n//         password,\n//       });\n//       setUser(response.data.user);\n//     } catch (err) {\n//       setError(err.response ? err.response.data.message : 'Login failed');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, login, logout, loading, error }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// // Custom hook for using the auth context\n// export const useAuth = () => {\n//   return useContext(AuthContext);\n// };","map":{"version":3,"names":[],"sources":["C:/Users/amris/OneDrive/Desktop/Rambla/frontend/src/context/Authcontext.jsx"],"sourcesContent":["// // AuthContext.jsx\r\n// import React, { createContext, useState, useContext } from 'react';\r\n// import axios from 'axios';\r\n\r\n// // Create the context\r\n// const AuthContext = createContext();\r\n\r\n// // AuthProvider component\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const login = async (username, password) => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await axios.post('http://localhost:7000/users/login', {\r\n//         username,\r\n//         password,\r\n//       });\r\n//       setUser(response.data.user);\r\n//     } catch (err) {\r\n//       setError(err.response ? err.response.data.message : 'Login failed');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setUser(null);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, login, logout, loading, error }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // Custom hook for using the auth context\r\n// export const useAuth = () => {\r\n//   return useContext(AuthContext);\r\n// };\r\n\r\n\r\n "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}