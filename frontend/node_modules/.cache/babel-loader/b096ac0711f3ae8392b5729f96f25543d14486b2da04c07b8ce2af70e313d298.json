{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amris\\\\OneDrive\\\\Desktop\\\\Rambla\\\\frontend\\\\src\\\\components\\\\providers\\\\AuthProvider.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const authToken = localStorage.getItem('authToken');\n\n//     try {\n//       if (authToken) {\n//         fetch('http://localhost:7000/users/auth/me', {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//         .then((res) => res.json())\n//         .then((data) => {\n//           if (data.user) {\n//             setUser(data.user);\n//           }\n//         });\n//       }\n//     } catch (error) {\n\n//       console.log('token removed');\n//       localStorage.removeItem('authToken');\n//     }\n//   },[])\n\n//   const login = (userData) => {\n//     setUser(userData.user);\n//     localStorage.setItem('authToken', userData.token); // Simulate storing a token\n//     //navigate('/');\n//   }; \n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem(\"authToken\");\n//     navigate('/login');\n//   };\n//   return (\n//     <AuthContext.Provider value={{ user, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  const checkAuthToken = async () => {\n    const authToken = localStorage.getItem('authToken');\n    if (authToken) {\n      try {\n        const response = await fetch('http://localhost:7000/users/auth/me', {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          if (data.user) {\n            setUser(data.user);\n          } else {\n            logout(); // Invalid token, logout the user\n          }\n        } else {\n          logout(); // Token validation failed, logout the user\n        }\n      } catch (error) {\n        console.error('Error during token validation', error);\n        logout();\n      }\n    }\n  };\n  useEffect(() => {\n    // Initial check\n    checkAuthToken();\n\n    // Set interval to check token every 30 seconds\n    const intervalId = setInterval(checkAuthToken, 1000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  const login = userData => {\n    setUser(userData.user);\n    localStorage.setItem('authToken', userData.token); // Simulate storing a token\n    navigate('/');\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('authToken');\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"/48TlfV0adSMEvsbW2gk5sMeopI=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","navigate","checkAuthToken","authToken","localStorage","getItem","response","fetch","headers","Authorization","ok","data","json","logout","error","console","intervalId","setInterval","clearInterval","login","userData","setItem","token","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/amris/OneDrive/Desktop/Rambla/frontend/src/components/providers/AuthProvider.js"],"sourcesContent":["// import React, { createContext, useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n\r\n//   useEffect(() => {\r\n//     const authToken = localStorage.getItem('authToken');\r\n    \r\n//     try {\r\n//       if (authToken) {\r\n//         fetch('http://localhost:7000/users/auth/me', {\r\n//         headers: {\r\n//           Authorization: `Bearer ${authToken}`,\r\n//         },\r\n//       })\r\n//         .then((res) => res.json())\r\n//         .then((data) => {\r\n//           if (data.user) {\r\n//             setUser(data.user);\r\n//           }\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n      \r\n//       console.log('token removed');\r\n//       localStorage.removeItem('authToken');\r\n//     }\r\n//   },[])\r\n  \r\n//   const login = (userData) => {\r\n//     setUser(userData.user);\r\n//     localStorage.setItem('authToken', userData.token); // Simulate storing a token\r\n//     //navigate('/');\r\n//   }; \r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"authToken\");\r\n//     navigate('/login');\r\n//   };\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default AuthContext;\r\n\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const checkAuthToken = async () => {\r\n    const authToken = localStorage.getItem('authToken');\r\n    if (authToken) {\r\n      try {\r\n        const response = await fetch('http://localhost:7000/users/auth/me', {\r\n          headers: {\r\n            Authorization: `Bearer ${authToken}`,\r\n          },\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          if (data.user) {\r\n            setUser(data.user);\r\n          } else {\r\n            logout(); // Invalid token, logout the user\r\n          }\r\n        } else {\r\n          logout(); // Token validation failed, logout the user\r\n        }\r\n      } catch (error) {\r\n        console.error('Error during token validation', error);\r\n        logout();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initial check\r\n    checkAuthToken();\r\n\r\n    // Set interval to check token every 30 seconds\r\n    const intervalId = setInterval(checkAuthToken, 1000);\r\n\r\n    // Cleanup interval on component unmount\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const login = (userData) => {\r\n    setUser(userData.user);\r\n    localStorage.setItem('authToken', userData.token); // Simulate storing a token\r\n    navigate('/');\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('authToken');\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAIF,SAAS,EAAE;MACb,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,SAAS;UACpC;QACF,CAAC,CAAC;QAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UAClC,IAAID,IAAI,CAACZ,IAAI,EAAE;YACbC,OAAO,CAACW,IAAI,CAACZ,IAAI,CAAC;UACpB,CAAC,MAAM;YACLc,MAAM,CAAC,CAAC,CAAC,CAAC;UACZ;QACF,CAAC,MAAM;UACLA,MAAM,CAAC,CAAC,CAAC,CAAC;QACZ;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDD,MAAM,CAAC,CAAC;MACV;IACF;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACd;IACAY,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMc,UAAU,GAAGC,WAAW,CAACf,cAAc,EAAE,IAAI,CAAC;;IAEpD;IACA,OAAO,MAAMgB,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,KAAK,GAAIC,QAAQ,IAAK;IAC1BpB,OAAO,CAACoB,QAAQ,CAACrB,IAAI,CAAC;IACtBK,YAAY,CAACiB,OAAO,CAAC,WAAW,EAAED,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC;IACnDrB,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,MAAMY,MAAM,GAAGA,CAAA,KAAM;IACnBb,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC;IACpCtB,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,IAAI;MAAEoB,KAAK;MAAEN;IAAO,CAAE;IAAAhB,QAAA,EAClDA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,EAAA,CA3DWF,YAAY;EAAA,QAENJ,WAAW;AAAA;AAAAsC,EAAA,GAFjBlC,YAAY;AA6DzB,eAAeD,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}